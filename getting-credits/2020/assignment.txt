# MFF UK NPRG066 (The C Programming Language) Assignment For Credits

Tar: A GNU tar compatible tape archiver
=======================================

See http://mff.devnull.cz/c-prog-lang/ for general information on deadlines and
the seminar mailing list.

Testing
-------
You must pass all the tests provided for either the first or both phases,
depending on what phase implementation you are handing over.  To get started
with testing, see the following file:

https://github.com/devnull-cz/c-prog-lang/tree/master/getting-credits/2020/tests/README

Always use the latest version of the tests.

Assignment submission
---------------------
To hand over your implementation, you must email us a link to an online
repository (either git or mercurial) before the deadline.  For example, a
repository on github.com.  We do not accept source code sent via email.

Send all email regarding submission of your code to both of us, that is jp at
devnull.cz and vlada at devnull.cz

While we assume you may have bugs in your code and those will be
resolved via a subsequent discussion, the submitted code is expected to
provide implementation of all the requested functionality below and will not be
accepted if that is not the case.  The code will not be accepted if it does not
fully pass the tests provided.  In other words, we will not accept partial
implementations.

General rules
-------------
You may not use code written by someone else.  No exceptions.

Tar Specification
-----------------
The tar header is defined in the standard:

https://pubs.opengroup.org/onlinepubs/9699919799/utilities/pax.html#tag_20_92_13_06

You may also check out the GNU tar documentation:

https://www.gnu.org/software/tar/manual/html_node/Standard.html
https://www.gnu.org/software/tar/manual/html_section/tar_67.html

Phase 1 Implementation
----------------------
Implement the -t and -f options.  The tar implementation must be able to list
GNU tar archives created via the following invocation:

	$ tar -f archive.tar -c <files>

If unsure what is the correct behavior, check how GNU tar behaves.

- Your implementation must be in one file only, called "mytar.c".  Do not create
  C header files.  We plan to use software for detecting duplicates so having
  just one file will make our life easier.

- No warnings allowed with "gcc -Wall -Wextra".

- C stdio file API must be used (it is part of the seminar classes) for
  manipulating the files.  System calls for processing files is not accepted
  (e.g. open(), read(), write(), ...).

- The processing of command line arguments must be done manually.  Use of
  getopt(3) is not allowed.

- Invalid invocation prints some error message and fails (you may use your
  wording for the messages).  Examples:

	$ ./mytar
	mytar: need at least one option
	$ echo $?
	2

	$ ./mytar -f archive.tar -X
	mytar: Unknown option: -X
	$ echo $?
	2

  For all other error messages and warnings, you must follow the exact wording
  (as we followed the wording from GNU tar).

- You may assume files under 2Gb.  That is, no extended headers are used.

- Assume only archives exclusively containing regular files.  That is, if you
  hit any header aside from one for regular files, you report the wrong header
  (you need to list any previous archived files if there are any) and exit:

	$ ./mytar -f archive.tar -t
	mytar: Unsupported header type: 53
	$ echo $?
	2

- See the manual page for GNU tar regarding proper exit values.

- Listing works as usual.

	$ touch file1 file2 file3 file4
	$ mytar -f archive.tar -c file*
	$ ./mytar -f archive.tar -t
	file1
	file2
	file3
	file4

- You must support file arguments and only list those in the archive.  Note
  that ordering of the arguments is not relevant and the listing follows
  ordering in the archive.

	$ ./mytar -f archive.tar -t file4 file1
	file1
	file4

- Files not present in the archive are reported to stderr at the end:

	$ ./mytar -f archive.tar -t file6 file4 file1 file5
	file1
	file4
	mytar: file6: Not found in archive
	mytar: file5: Not found in archive
	mytar: Exiting with failure status due to previous errors
	$ echo $?
	2

- Listing truncated archive (that is, there is not enough data for the listed
  archived file size in the archive) reports an error.

	$ ../../mytar -f partial.tar -t
	aaa-file
	mytar: Unexpected EOF in archive
	mytar: Error is not recoverable: exiting now

- A tar archive finishes with two zero blocks.  Missing both is silently
  accepted but missing just one emits a warning (but the command still returns
  0):

	$ ../../mytar -f one-zero-block-missing.tar -t
	aaa-file
	mytar: A lone zero block at 4
	$ echo $?
	0

- no need to collate the options, as showen below.  We will not test it.

	$ ./mytar -tf archive.tar

Phase 2
-------
Implement the -x and -v options.  The tar implementation must be able to extract
GNU tar archives created via the following invocation:

	$ tar -f archive.tar -c <files>

The -v option only takes effect with the -x option, and is silently ignored with
the -t option.

If unsure what is the correct behavior, check how GNU tar behaves and/or ask on
our seminar alias.  There might be slight differences but the tests are written
to cope with them.

- No need to collate the options, as shown below.  We will not test it.

	# No need to support these:
	$ ./mytar -tf archive.tar
	$ ./mytar -tvf archive.tar
	$ ...

	# We are only testing instead these:
  	$ ./mytar -t -f archive.tar
  	$ ./mytar -t -v -f archive.tar
	$ ...

- Recognize and report if a file is not a tar file (use the 'magic' field for
  that).

	$ ./mytar -x -f mytar.c
	mytar: This does not look like a tar archive
	mytar: Exiting with failure status due to previous errors
	$ echo $?
	2

- Extract works silently as usual.

	$ ./mytar -x -f archive.tar
	$ echo $?
	0

- Extract works verbosely with -v.

	$ ./mytar -v -x -f archive.tar
	file1
	file2
	file3
	file4
	$ echo $?
	0

- Working with truncated archives results in the similar behavior as when
  listing them but the extract will do as much as possible:

	$ ./mytar -x -f partial.tar
	mytar: Unexpected EOF in archive
	mytar: Error is not recoverable: exiting now

- Listing a truncated archive still lists each file with -v (file2 is
  truncated in our example, file1 is not):

	$ ./mytar -v -x -f partial.tar
	file1
	file2
	mytar: Unexpected EOF in archive
	mytar: Error is not recoverable: exiting now

	- also note that the file2 is created and all the data from the archive
	  pertaining to fil2 is still written there.  That is, the tar does as
	  much as it is possible before bailing out.

Please ask questions on the seminar alias if anything is not clear.
