# Modules we still need to use in 2020

# Looks like we did not do a section on goto.  Here it is for the next year.
goto.md

# Need to say more on std functions for string operations
# - mention inherently insecure gets()
# - limitations of strncpy()/strncat() - cause of strlcpy()/strlcat()
# - off-by one errors
# - CERT C coding standard
# ...

# When bit operations are introduced, use src/cast-intptr.c as it uses ^

# Before using this, add the C99 specification paragraph number that allows
# that.
home-assignments/offsetof.md

# Add a module on when to use size_t and when other integer types.
#
# E.g. https://stackoverflow.com/questions/131803/unsigned-int-vs-size-t
#
# Plus examples on working with file offset (seek, read, write, ...), etc.
The size_t type is the unsigned integer type that is the result of the sizeof
operator (and the offsetof operator), so it is guaranteed to be big enough to
contain the size of the biggest object your system can handle (e.g., a static
array of 8Gb).

# Related to the int/size_t discussion above, make a new module for uint32_t et
# al.  It is in the spec as part of stdint.h.
7.18.1.1  Exact-widthinteger types1The  typedef  nameintN_tdesignates  a  signed
integer  type  with  widthN,nopaddingbits,  and  a  two’scomplement
representation.Thus,int8_tdenotes  a  signed  integertype with a width of
exactly 8 bits.2The  typedef  nameuintN_tdesignates  an  unsigned  integer  type
with  widthN.Thus,uint24_tdenotes an unsigned integer type with a width of
exactly 24 bits.3These  types  are  optional.However,  ifanimplementation
provides  integer  types  withwidths  of  8,  16,  32,  or  64  bits,  no
padding  bits,  and  (for  the  signed  types)  that  have  atwo’scomplement
representation, it shall define the corresponding typedef names
